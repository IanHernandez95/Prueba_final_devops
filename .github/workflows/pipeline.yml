name: Pipeline prueba final
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'

jobs:
  snyk-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check terraform files
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  terraform-build:
    needs: snyk-scan
    runs-on: ubuntu-latest
    env:
        TF_TOKEN_app_terraform_io: ${{ secrets.TERRAFORM_TOKEN }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Generate SSH key
      run: |
        ssh-keygen -t rsa -b 4096 -C "github-actions" -N "" -f id_rsa
        echo "Clave pública generada:"
        cat id_rsa.pub
      # Guarda la clave pública y privada como artifacts
    - name: Save SSH keys as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ssh-keys
        path: |
          id_rsa
          id_rsa.pub

    - name: Export SSH public key to Terraform
      run: |
        echo 'public_key = "\"$(cat id_rsa.pub | tr -d '\n')\""' >> terraform.tfvars

    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      run: terraform apply -auto-approve
    
    - name: Save EC2 Public IP
      run: |
        echo "ec2_public_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV

#
#  docker-build:
#    needs: terraform-build
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v3
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ vars.AWS_REGION }}
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#        with:
#          mask-password: 'false'
#      
#      - name: Build Docker image
#        run: docker build -f paginaweb-static/Dockerfile -t pruebafinal ./paginaweb-static
#
#      - name: Run Snyk to check Docker image
#        uses: snyk/actions/docker@master
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} 
#        with:
#          image: pruebafinal:latest
#
#      - name: Tag Docker image
#        run: docker tag pruebafinal:latest ${{ secrets.AWS_USER_ID}}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/sitioweb-static:latest
#
#      - name: Push Docker image to Amazon ECR
#        run: docker push ${{ secrets.AWS_USER_ID}}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/sitioweb-static:latest
#
  deploy-api-ec2:
    needs:  terraform-build
    runs-on: ubuntu-latest

    steps:
      - name: checkout repository
        uses: actions/checkout@v2

      - name: Download SSH keys
        uses: actions/download-artifact@v3
        with:
          name: ssh-keys
          path: ./

      - name: Add SSH key to agent
        run: |
          chmod 600 id_rsa
          mkdir -p ~/.ssh
          mv id_rsa ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.ec2_public_ip }} >> ~/.ssh/known_hosts

      - name: Connect to EC2 instance
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ env.ec2_public_ip }} "echo '¡Conexión exitosa desde GitHub Actions!'"