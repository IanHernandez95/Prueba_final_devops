name: Pipeline prueba final
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'

jobs:
  snyk-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check terraform files
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  terraform-build:
    needs: snyk-scan
    runs-on: ubuntu-latest
    env:
        TF_TOKEN_app_terraform_io: ${{ secrets.TERRAFORM_TOKEN }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform init
      

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      run: terraform apply -auto-approve
    
    - name: Get EC2 IP address
      id: ec2_ip
      run: |
        instance_ip=$(terraform output -raw InstanceIP | sed 's/::debug::.*//')
        echo "$instance_ip" > ec2_ip.txt

    - name: Upload EC2 IP as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ec2-ip
        path: ec2_ip.txt

  docker-build:
    needs: terraform-build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'false'
      
      - name: Build Docker image
        run: docker build -f paginaweb-static/Dockerfile -t pruebafinal ./paginaweb-static

      - name: Run Snyk to check Docker image
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} 
        with:
          image: pruebafinal:latest

      - name: Tag Docker image
        run: docker tag pruebafinal:latest ${{ secrets.AWS_USER_ID}}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/sitioweb-static:latest

      - name: Push Docker image to Amazon ECR
        run: docker push ${{ secrets.AWS_USER_ID}}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/sitioweb-static:latest

  deploy-api-ec2:
    needs:  terraform-build
    runs-on: ubuntu-latest

    steps:
      - name: checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH keys
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_SECRET_KEY }}

      - name: Download EC2 IP artifact
        uses: actions/download-artifact@v3
        with:
          name: ec2-ip
          
      - name: Copy app to EC2
        run: |
          scp -i /tmp/ssh-key -o StrictHostKeyChecking=no -r api/src ubuntu@$(cat ec2_ip.txt):/home/ubuntu/app
  
      - name: SSH into EC2 and start the app
        run: |
          ssh -i /tmp/ssh-key -o StrictHostKeyChecking=no ubuntu@$(cat ec2_ip.txt) << EOF
            cd /home/ubuntu/app
            npm install
            nohup node app.js &
          EOF