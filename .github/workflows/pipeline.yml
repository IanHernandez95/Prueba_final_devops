name: Pipeline prueba final
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'

jobs:
  snyk-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check terraform files
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  terraform-build:
    needs: snyk-scan
    runs-on: ubuntu-latest
    env:
        TF_TOKEN_app_terraform_io: ${{ secrets.TERRAFORM_TOKEN }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform init
      

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      run: terraform apply -auto-approve
    
    - name: Terraform Outputs
      id: outputs
      run: terraform output -raw InstanceIP | grep -oP '\d+\.\d+\.\d+\.\d+' | sort | uniq > ec2_ip.txt


    - name: Upload Terraform Outputs as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ec2_ip
        path: ec2_ip.txt

#
#  docker-build:
#    needs: terraform-build
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v3
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ vars.AWS_REGION }}
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#        with:
#          mask-password: 'false'
#      
#      - name: Build Docker image
#        run: docker build -f paginaweb-static/Dockerfile -t pruebafinal ./paginaweb-static
#
#      - name: Run Snyk to check Docker image
#        uses: snyk/actions/docker@master
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} 
#        with:
#          image: pruebafinal:latest
#
#      - name: Tag Docker image
#        run: docker tag pruebafinal:latest ${{ secrets.AWS_USER_ID}}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/sitioweb-static:latest
#
#      - name: Push Docker image to Amazon ECR
#        run: docker push ${{ secrets.AWS_USER_ID}}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/sitioweb-static:latest
#
#  deploy-api-ec2:
#    needs:  terraform-build
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: checkout repository
#        uses: actions/checkout@v2
#
#      - name: Docker build Local
#        run: docker build -f api/Dockerfile -t api-pruebafinal ./api
#
#      - name: Run Snyk to check Docker image
#        uses: snyk/actions/docker@master
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} 
#        with:
#          image: api-pruebafinal:latest
#
#      - name: Docker save image
#        run: docker save -o api-pruebafinal.tar api-pruebafinal:latest
#
#      - name: Set up SSH key for EC2 access
#        run: |
#          echo "${{ secrets.SSH_SECRET_KEY }}" > private_key.pem
#          chmod 400 private_key.pem
#
#      - name: Download Terraform Outputs Artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: ec2_ip
#
#      - name: Docker load image
#        run: scp -i private_key.pem -o StrictHostKeyChecking=no api-pruebafinal.tar ubuntu@$(cat ec2_ip.txt):/home/ubuntu
#
#      - name: Docker installation
#        run: ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$(cat ec2_ip.txt) "sudo apt-get update && sudo apt-get install -y docker.io"
#
#      - name: Docker start
#        run: ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$(cat ec2_ip.txt) "sudo systemctl start docker && sudo systemctl enable docker"
#        
#      - name: Docker load image
#        run: ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$(cat ec2_ip.txt) "sudo docker load -i api-pruebafinal.tar"
#
#      - name: Docker run puerto 3000
#        run: ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$(cat ec2_ip.txt) "sudo docker run -d -p 3000:3000 api-pruebafinal:latest"
#
#
  configurar-agent-cloudwatch:
#    needs: deploy-api-ec2
    runs-on: ubuntu-latest

    steps:
      - name: checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH key for EC2 access
        run: |
          echo "${{ secrets.SSH_SECRET_KEY }}" > private_key.pem
          chmod 400 private_key.pem

      - name: Download Terraform Outputs Artifact
        uses: actions/download-artifact@v3
        with:
          name: ec2_ip

      - name: Install CloudWatch Agent on EC2 Instance
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@$(cat ec2_ip.txt) << 'EOF'
            sudo apt update && sudo apt upgrade -y
            sudo apt install amazon-cloudwatch-agent -y
          EOF

      - name: Create CloudWatch Agent Configuration File
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@$(cat ec2_ip.txt) << 'EOF'
            echo '{
              "metrics": {
                "append_dimensions": {
                  "InstanceId": "${aws:InstanceId}"
                },
                "metrics_collected": {
                  "disk": [
                    {
                      "measurement": [
                        "free",
                        "used",
                        "total",
                        "used_percent"
                      ],
                      "resources": [
                        "/"
                      ]
                    }
                  ]
                }
              }
            }' | sudo tee /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          EOF
  
      - name: Start CloudWatch Agent
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@$(cat ec2_ip.txt) << 'EOF'
            sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a start \
              -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
              -s
          EOF